import glob, os, math, time
from decimal import *
import numpy as np
np.random.seed(0)

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import mean_squared_error

######## INTERVENTIONS
### Saving based on NLL 
ensemble_preds = np.array([19.76003, 19.571033, 12.125517, 23.078472, 19.34019, 14.236501, 19.651865, 19.705332, 18.831812, 18.828154, 19.721909, 19.701374, 19.729279, 19.560772, 19.917545, 19.68107, 19.563038, 21.08012, 14.409856, 10.760031, 20.14383])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.066326015, 0.065911815, 0.06148366, 0.042929165, 0.065179266, 0.060637724, 0.065800585, 0.065442175, 0.061963398, 0.06668946, 0.066085055, 0.06551437, 0.06595322, 0.06576934, 0.06449749, 0.065160036, 0.065194026, 0.0670268, 0.063569225, 0.05844211, 0.06631085])
ensemble_pred_log_probs = np.array([-2.7131732, -2.7194376, -2.7889838, -3.1482038, -2.730614, -2.802838, -2.7211266, -2.7265882, -2.7812114, -2.7077084, -2.7168126, -2.7254858, -2.7188096, -2.7216015, -2.741129, -2.7309089, -2.7303874, -2.7026627, -2.7556257, -2.8397186, -2.7134018])
ensemble_true_probs = np.array([0.035269603, 0.014937744, 0.0609278, 0.035041716, 0.023956835, 0.060598556, 0.036044985, 0.015725188, 0.027709449, 0.059637886, 0.059697706, 0.020417081, 0.020378025, 0.06362778, 0.052776035, 0.025887204, 0.025201399, 0.040873066, 0.048649736, 0.058406003, 0.0662919])
ensemble_true_log_probs = np.array([-3.3447337, -4.203864, -2.7980657, -3.351216, -3.7315016, -2.8034842, -3.3229876, -4.1524916, -3.5859818, -2.8194642, -2.8184617, -3.8913834, -3.8932981, -2.7547052, -2.941698, -3.6540065, -3.6808558, -3.197284, -3.023109, -2.8403366, -2.7136877])
ensemble_val_stddev = [6.014869, 6.0526686, 6.4885907, 9.293036, 6.1206937, 6.5791106, 6.0628977, 6.096103, 6.438353, 5.98209, 6.036801, 6.0893865, 6.048868, 6.0657787, 6.185391, 6.1224985, 6.1193075, 5.9519815, 6.2757125, 6.826281, 6.016244]

## Saving based on MSE trial corresponding
ensemble_preds = np.array([22.592852, 21.448545, 13.755903, 21.200565, 21.818558, 16.980942, 21.100103, 21.858631, 21.338009, 20.654617, 22.405613, 22.03941, 22.699509, 20.763569, 22.42091, 21.899014, 20.974804, 23.174145, 18.628778, 13.399005, 22.443352])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.072088696, 0.06901411, 0.057687514, 0.049116496, 0.07044083, 0.058882434, 0.06556543, 0.06890955, 0.06741659, 0.06461476, 0.0683273, 0.07146095, 0.071731985, 0.064823486, 0.07066407, 0.07044751, 0.066841185, 0.070181645, 0.061926093, 0.058086783, 0.06581957])
ensemble_pred_log_probs = np.array([-2.629858, -2.6734443, -2.8527145, -3.0135603, -2.6529822, -2.8322124, -2.7247066, -2.6749606, -2.6968641, -2.7393124, -2.683446, -2.6386042, -2.6348186, -2.7360873, -2.649818, -2.6528873, -2.7054358, -2.6566684, -2.7818136, -2.845817, -2.720838])
ensemble_true_probs = np.array([0.016046936, 0.02310591, 0.057343923, 0.03097447, 0.038827963, 0.05345036, 0.027030142, 0.025636235, 0.042655136, 0.048631467, 0.044510845, 0.032847222, 0.037759904, 0.05860652, 0.037009742, 0.0394301, 0.033435013, 0.055957597, 0.061823376, 0.054649115, 0.06068312])
ensemble_true_log_probs = np.array([-4.1322374, -3.7676668, -2.8586884, -3.474592, -3.2486145, -2.9290018, -3.6108027, -3.6637485, -3.1546075, -3.0234845, -3.1120224, -3.415888, -3.2765074, -2.8369093, -3.296574, -3.2332258, -3.3981516, -2.883161, -2.7834737, -2.9068222, -2.8020897])
ensemble_val_stddev = [5.5340466, 5.78059, 6.915573, 8.122369, 5.6635103, 6.775235, 6.084644, 5.789363, 5.9175677, 6.174166, 5.838695, 5.582661, 5.5615673, 6.154287, 5.6456165, 5.6629715, 5.9685097, 5.6844244, 6.4422317, 6.8680387, 6.0611506]

# ## Saving based on NLL trial corresponding
ensemble_preds = np.array([20.616007, 19.600424, 10.735434, 21.446451, 19.725674, 14.596051, 19.96127, 20.137886, 19.324179, 19.700907, 20.536327, 19.73283, 20.796623, 19.806614, 20.817057, 19.880224, 19.711012, 21.82233, 15.805769, 9.782767, 21.161045])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.06906843, 0.0659168, 0.065581284, 0.050202683, 0.067133784, 0.060209822, 0.067367435, 0.06739496, 0.06124644, 0.067405015, 0.06526125, 0.06686394, 0.069153674, 0.06641848, 0.066905, 0.06775928, 0.06610119, 0.06889305, 0.06594086, 0.06415004, 0.06942292])
ensemble_pred_log_probs = np.array([-2.6726575, -2.719362, -2.724465, -2.9916868, -2.701068, -2.8099198, -2.6975935, -2.697185, -2.7928495, -2.6970358, -2.7293568, -2.7050955, -2.6714242, -2.71178, -2.7044816, -2.691794, -2.7165685, -2.6752, -2.718997, -2.7465305, -2.6675382])
ensemble_true_probs = np.array([0.028956924, 0.015060833, 0.061190933, 0.03195443, 0.025464876, 0.05996669, 0.033758868, 0.016822433, 0.03058724, 0.05543536, 0.055205997, 0.020014066, 0.025161054, 0.06348108, 0.048277386, 0.026179379, 0.025740284, 0.046192765, 0.057361946, 0.06293291, 0.06802033])
ensemble_true_log_probs = np.array([-3.541946, -4.1956577, -2.7937562, -3.4434445, -3.6704552, -2.813966, -3.3885121, -4.085042, -3.4871724, -2.8925376, -2.8966837, -3.91132, -3.682458, -2.7570133, -3.030792, -3.6427832, -3.659698, -3.074932, -2.858374, -2.765686, -2.6879487])
ensemble_val_stddev = [5.776043, 6.05221, 6.0831733, 7.946634, 5.9424963, 6.6258683, 5.9218855, 5.919468, 6.513721, 5.918584, 6.113003, 5.9664793, 5.768924, 6.006497, 5.962816, 5.88764, 6.035327, 5.790749, 6.0500007, 6.218893, 5.746549]
ensemble_val_entropy = [3.1726575, 3.219362, 3.224465, 3.4916868, 3.201068, 3.3099198, 3.1975935, 3.197185, 3.2928495, 3.1970358, 3.2293568, 3.2050955, 3.1714242, 3.21178, 3.2044816, 3.191794, 3.2165685, 3.1752, 3.218997, 3.2465305, 3.1675382]

# ######## PAUSE
# ## Saving based on MSE trial corresponding
ensemble_preds = np.array([21.616798, 24.174332, 18.98918, 21.84357, 20.832342, 20.858896, 20.450039, 24.057964, 22.62692, 20.135294, 20.676428, 22.87759, 23.930386, 16.87083, 16.557745, 24.42737, 15.996732, 19.67284, 23.995039, 18.820564, 23.356327])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.07034701, 0.08211146, 0.0631613, 0.07270612, 0.06814593, 0.06623952, 0.0658004, 0.0812626, 0.073609255, 0.06539595, 0.066728935, 0.07789926, 0.08046252, 0.05912496, 0.05737434, 0.08405996, 0.056407627, 0.06403576, 0.08137893, 0.062155575, 0.076432906])
ensemble_pred_log_probs = np.array([-2.654315, -2.4996777, -2.7620635, -2.6213298, -2.6861038, -2.714478, -2.7211294, -2.5100694, -2.6089845, -2.727295, -2.7071166, -2.5523388, -2.5199637, -2.828102, -2.858158, -2.476225, -2.875151, -2.7483137, -2.5086389, -2.7781148, -2.571342])
ensemble_true_probs = np.array([0.022178035, 0.04001324, 0.04029119, 0.031059535, 0.03220525, 0.034632865, 0.030928105, 0.039063774, 0.053156585, 0.051972028, 0.055233277, 0.038123064, 0.04770567, 0.058302827, 0.057190064, 0.06331945, 0.013361788, 0.03206687, 0.048424967, 0.02958682, 0.062157188])
ensemble_true_log_probs = np.array([-3.8086529, -3.218545, -3.2116225, -3.4718494, -3.4356258, -3.3629522, -3.47609, -3.2425597, -2.9345133, -2.9570496, -2.8961897, -3.2669358, -3.042705, -2.8421047, -2.861375, -2.7595627, -4.3153563, -3.4399319, -3.0277398, -3.5204263, -2.7780888])
ensemble_val_stddev = [5.6710625, 4.858546, 6.3162456, 5.4870534, 5.8542347, 6.022723, 6.0629153, 4.909297, 5.41973, 6.100412, 5.978551, 5.121259, 4.958113, 6.7474427, 6.9533224, 4.745925, 7.072489, 6.2299924, 4.90228, 6.418448, 5.21951]
ensemble_val_entropy = [3.154315, 2.9996777, 3.2620635, 3.1213298, 3.1861038, 3.214478, 3.2211294, 3.0100694, 3.1089845, 3.227295, 3.2071166, 3.0523388, 3.0199637, 3.328102, 3.358158, 2.976225, 3.375151, 3.2483137, 3.0086389, 3.2781148, 3.071342]

# ## Saving based on NLL trial corresponding
ensemble_preds = np.array([18.871563, 22.313894, 17.594662, 19.27821, 18.941639, 17.775421, 16.955332, 23.247786, 19.615765, 17.452942, 20.282528, 17.729937, 23.173899, 15.870738, 14.435493, 23.208704, 13.7378645, 18.334694, 22.118391, 17.127201, 21.125875])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.06288631, 0.06786773, 0.061907552, 0.062092416, 0.061777655, 0.06022646, 0.0617975, 0.07368669, 0.06282872, 0.06150272, 0.06462115, 0.06103071, 0.07354723, 0.0596322, 0.054885406, 0.07384463, 0.050932363, 0.063670434, 0.07125341, 0.06237674, 0.065827325])
ensemble_pred_log_probs = np.array([-2.7664268, -2.6901946, -2.782113, -2.7791314, -2.7842135, -2.8096435, -2.7838924, -2.607933, -2.767343, -2.7886739, -2.7392135, -2.7963781, -2.6098275, -2.8195596, -2.9025078, -2.605792, -2.9772568, -2.754035, -2.6415126, -2.7745628, -2.7207203])
ensemble_true_probs = np.array([0.040976852, 0.02886738, 0.04801246, 0.019763768, 0.023097632, 0.051197246, 0.051221825, 0.033855688, 0.031951174, 0.059979044, 0.05610278, 0.013805975, 0.041310225, 0.056687105, 0.05362864, 0.04983367, 0.009706503, 0.024469377, 0.061016172, 0.039420698, 0.06470115])
ensemble_true_log_probs = np.array([-3.194748, -3.545043, -3.0362947, -3.923905, -3.7680252, -2.9720695, -2.9715896, -3.3856483, -3.4435463, -2.81376, -2.88057, -4.282654, -3.1866453, -2.8702085, -2.925672, -2.9990644, -4.634959, -3.7103329, -2.7966163, -3.2334642, -2.7379763])
ensemble_val_stddev = [6.3438654, 5.8782325, 6.444162, 6.424975, 6.4577107, 6.6240373, 6.455638, 5.4140344, 6.3496814, 6.4865794, 6.173556, 6.5367475, 5.4243, 6.690049, 7.268641, 5.4024553, 7.832786, 6.2657394, 5.5989223, 6.3956895, 6.060436]
ensemble_val_entropy = [3.2664268, 3.1901946, 3.282113, 3.2791314, 3.2842135, 3.3096435, 3.2838924, 3.107933, 3.267343, 3.2886739, 3.2392135, 3.2963781, 3.1098275, 3.3195596, 3.4025078, 3.105792, 3.4772568, 3.254035, 3.1415126, 3.2745628, 3.2207203]

# ######## COMPARE
# ## Saving based on MSE trial corresponding
# ensemble_preds = np.array([19.38856, 22.635103, 21.859533, 25.579487, 21.928595, 18.43546, 18.16982, 22.351635, 21.586094, 23.43073, 21.424358, 25.587948, 25.268469, 22.509325, 19.501879, 17.78042, 22.058098, 25.881222, 23.156685, 18.750782, 19.7925])
# true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
# ensemble_pred_probs = np.array([0.05582445, 0.054150958, 0.06322117, 0.061267268, 0.05486005, 0.059257373, 0.060229704, 0.059347283, 0.059507243, 0.06333649, 0.056914087, 0.062241014, 0.05837194, 0.06214813, 0.057793405, 0.06067247, 0.05620588, 0.06033861, 0.048042748, 0.059946492, 0.056251235])
# ensemble_pred_log_probs = np.array([-2.8855433, -2.9159796, -2.761116, -2.7925096, -2.9029698, -2.825865, -2.8095896, -2.824349, -2.8216572, -2.7592936, -2.8662124, -2.776741, -2.84092, -2.7782345, -2.8508806, -2.8022652, -2.8787339, -2.8077831, -3.035664, -2.814303, -2.8779273])
# ensemble_true_probs = np.array([0.03743594, 0.0328546, 0.023595318, 0.05337136, 0.038716074, 0.047696795, 0.044414718, 0.031066533, 0.042949628, 0.03158251, 0.04663459, 0.05401845, 0.05028893, 0.048559345, 0.05081519, 0.018132009, 0.039591767, 0.059480935, 0.04238549, 0.030424118, 0.056227162])
# ensemble_true_log_probs = np.array([-3.285124, -3.4156635, -3.746707, -2.930481, -3.2515004, -3.042891, -3.1141844, -3.4716241, -3.1477273, -3.4551518, -3.0654128, -2.9184296, -2.9899702, -3.0249686, -2.97956, -4.0100765, -3.229134, -2.8220994, -3.1609492, -3.4925196, -2.8783553])
# ensemble_val_stddev = [7.1463733, 7.3672247, 6.3102636, 6.5115066, 7.2720003, 6.732365, 6.62368, 6.7221646, 6.704097, 6.2987747, 7.009552, 6.409636, 6.8344865, 6.4192157, 6.902902, 6.575343, 7.0978746, 6.611725, 8.303901, 6.654973, 7.0921516]
# ensemble_val_entropy = [3.3855433, 3.4159796, 3.261116, 3.2925096, 3.4029698, 3.325865, 3.3095896, 3.324349, 3.3216572, 3.2592936, 3.3662124, 3.276741, 3.34092, 3.2782345, 3.3508806, 3.3022652, 3.3787339, 3.3077831, 3.535664, 3.314303, 3.3779273]

# ## Saving based on NLL trial corresponding
# ensemble_preds = np.array([20.34955, 22.336391, 22.482138, 26.624796, 20.55964, 17.83248, 17.632116, 21.40643, 21.41535, 23.256126, 21.096136, 26.25925, 26.109802, 22.982815, 18.592123, 17.062334, 21.846424, 26.514181, 23.770975, 20.411064, 18.647324])
# true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
# ensemble_pred_probs = np.array([0.065662876, 0.06048843, 0.068521059, 0.081943706, 0.06152356, 0.07305816, 0.071877636, 0.06692334, 0.06559721, 0.06602424, 0.06789742, 0.084716424, 0.072866075, 0.07601332, 0.067652605, 0.07246295, 0.06400109, 0.08259833, 0.052223243, 0.0640679, 0.06827203])
# ensemble_pred_log_probs = np.array([-2.7232215, -2.805303, -2.6806064, -2.5017228, -2.788335, -2.6164994, -2.63279, -2.7042074, -2.7242222, -2.7177334, -2.6897573, -2.4684458, -2.619132, -2.5768466, -2.6933694, -2.6246798, -2.748855, -2.4937658, -2.9522276, -2.7478118, -2.6842551])
# ensemble_true_probs = np.array([0.031590942, 0.030795323, 0.018190932, 0.072749555, 0.0318528, 0.05710924, 0.05073982, 0.023675958, 0.043031022, 0.032103665, 0.053250037, 0.07151767, 0.06338896, 0.048434746, 0.06142237, 0.010070423, 0.039315492, 0.082181536, 0.04296999, 0.020446919, 0.06646709])
# ensemble_true_log_probs = np.array([-3.4548848, -3.4803925, -4.006832, -2.6207325, -3.44663, -2.8627894, -2.9810443, -3.7432952, -3.145834, -3.438785, -2.9327567, -2.6378107, -2.7584655, -3.0275378, -2.7899811, -4.5981526, -3.2361367, -2.4988246, -3.1472533, -3.889923, -2.7110484])
# ensemble_val_stddev = [6.075614, 6.595349, 5.8221393, 4.8684916, 6.484382, 5.4606133, 5.5502987, 5.961183, 6.0816965, 6.0423613, 5.8756623, 4.7091494, 5.4750075, 5.2483196, 5.896924, 5.5054655, 6.2333665, 4.829907, 7.639171, 6.2268662, 5.843421]
# ensemble_val_entropy = [3.2232215, 3.305303, 3.1806064, 3.0017228, 3.288335, 3.1164994, 3.13279, 3.2042074, 3.2242222, 3.2177334, 3.1897573, 2.9684458, 3.119132, 3.0768466, 3.1933694, 3.1246798, 3.248855, 2.9937658, 3.4522276, 3.2478118, 3.1842551]

# ######## COMPARE Without RELU
# ## Saving based on MSE trial corresponding
ensemble_preds = np.array([21.871881, 22.994259, 21.404873, 24.161356, 20.344296, 18.26764, 17.008202, 20.5765, 20.907486, 22.900982, 21.352657, 24.025215, 26.75854, 22.287552, 20.385773, 19.811897, 20.100632, 25.690357, 23.530666, 20.15261, 19.70316])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.05401609, 0.054374292, 0.051884066, 0.0534666, 0.052959383, 0.054478258, 0.0616764, 0.053766366, 0.05520906, 0.053406112, 0.053683747, 0.054506864, 0.041968577, 0.055615894, 0.051837675, 0.05042001, 0.054127503, 0.05035473, 0.047393724, 0.053855482, 0.051850203])
ensemble_pred_log_probs = np.array([-2.9184732, -2.9118638, -2.9587436, -2.928698, -2.93823, -2.9099536, -2.7858539, -2.9231071, -2.8966281, -2.92983, -2.924645, -2.9094286, -3.170834, -2.8892863, -2.959638, -2.9873672, -2.9164128, -2.9886627, -3.0492654, -2.921451, -2.9593964])
ensemble_true_probs = np.array([0.026253417, 0.0344675, 0.028548133, 0.0433278, 0.031598244, 0.04596998, 0.050902277, 0.024002641, 0.038694177, 0.034854945, 0.045221772, 0.04326451, 0.04081788, 0.046517756, 0.04406813, 0.029516041, 0.030477865, 0.049671423, 0.04100283, 0.025103232, 0.05181164])
ensemble_true_log_probs = np.array([-3.639959, -3.3677385, -3.5561638, -3.1389608, -3.4546537, -3.0797668, -2.9778476, -3.7295914, -3.2520661, -3.3565602, -3.0961766, -3.1404226, -3.198635, -3.0679212, -3.1220183, -3.5228214, -3.4907546, -3.0023255, -3.1941142, -3.6847587, -2.9601405])
ensemble_val_stddev = [7.3856187, 7.336965, 7.6891117, 7.4615226, 7.532986, 7.322963, 6.4683137, 7.4199214, 7.2260284, 7.469976, 7.4313426, 7.31912, 9.505735, 7.1731706, 7.6959925, 7.912381, 7.370418, 7.922638, 8.41762, 7.4076447, 7.6941304]
ensemble_val_entropy = [3.4184732, 3.4118638, 3.4587436, 3.428698, 3.43823, 3.4099536, 3.2858539, 3.4231071, 3.3966281, 3.42983, 3.424645, 3.4094286, 3.670834, 3.3892863, 3.459638, 3.4873672, 3.4164128, 3.4886627, 3.5492654, 3.421451, 3.4593964]

# ## Saving based on NLL trial corresponding
ensemble_preds = np.array([22.333923, 22.564854, 22.743055, 24.888329, 18.829685, 17.443573, 19.031185, 22.386452, 20.235817, 24.55627, 22.29688, 24.12427, 24.64392, 23.174105, 19.419403, 18.065504, 20.477493, 26.195766, 21.356613, 21.81388, 18.845934])
true_values = np.array([13.0, 30.0, 13.0, 29.0, 28.0, 14.0, 13.0, 30.0, 27.0, 16.0, 17.0, 29.0, 29.0, 18.0, 16.0, 28.0, 28.0, 27.0, 19.0, 11.0, 20.0])
ensemble_pred_probs = np.array([0.0663955, 0.06329531, 0.065292224, 0.0721412, 0.06477086, 0.06470132, 0.06621025, 0.061680447, 0.07042855, 0.07004115, 0.062628865, 0.07296277, 0.071477085, 0.06417091, 0.06376194, 0.06526032, 0.070284314, 0.06974646, 0.061029017, 0.06430308, 0.06623124])
ensemble_pred_log_probs = np.array([-2.712126, -2.759944, -2.7288823, -2.62913, -2.7368994, -2.7379737, -2.71492, -2.7857883, -2.6531565, -2.6586723, -2.770529, -2.617806, -2.6383784, -2.7462053, -2.7525988, -2.729371, -2.6552067, -2.6628885, -2.7964058, -2.7441478, -2.714603])
ensemble_true_probs = np.array([0.019866815, 0.031564444, 0.018311491, 0.054719236, 0.021381022, 0.055358388, 0.04011989, 0.030850379, 0.03452271, 0.02266407, 0.04432259, 0.04902657, 0.05271052, 0.045386504, 0.054916702, 0.017424531, 0.029205335, 0.069060445, 0.057189286, 0.014076998, 0.065026715])
ensemble_true_log_probs = np.array([-3.9187045, -3.455724, -4.0002265, -2.90554, -3.8452516, -2.893927, -3.215883, -3.4786062, -3.366138, -3.7869744, -3.1162608, -3.0153928, -2.9429402, -3.0925405, -2.9019377, -4.049876, -3.5334039, -2.6727731, -2.8613887, -4.263213, -2.7329571])
ensemble_val_stddev = [6.0085745, 6.302872, 6.110104, 5.5300193, 6.1592855, 6.1659064, 6.0253854, 6.467889, 5.6644964, 5.695827, 6.3699427, 5.467751, 5.5814013, 6.2168703, 6.256747, 6.1130905, 5.676121, 5.719892, 6.536927, 6.204094, 6.0234756]
ensemble_val_entropy = [3.212126, 3.259944, 3.2288823, 3.12913, 3.2368994, 3.2379737, 3.21492, 3.2857883, 3.1531565, 3.1586723, 3.270529, 3.117806, 3.1383784, 3.2462053, 3.2525988, 3.229371, 3.1552067, 3.1628885, 3.2964058, 3.2441478, 3.214603]

################### ANALYSIS PLOTS ###################
# plt.clf()
# plt.subplot(3, 2, 1)
# plt.scatter(ensemble_pred_probs, errors)
# plt.title('Absolute errors vs Ensemble pred probs')

# plt.subplot(3, 2, 2)
# plt.scatter(ensemble_pred_log_probs, errors)
# plt.title('Absolute errors vs Ensemble pred log probs')

# plt.subplot(3, 2, 3)
# plt.scatter(ensemble_true_probs, errors)
# plt.title('Absolute errors vs Ensemble True probs')

# plt.subplot(3, 2, 4)
# plt.scatter(ensemble_true_log_probs, errors)
# plt.title('Absolute errors vs Ensemble True log probs')

# plt.subplot(3, 2, 5)
# plt.scatter(ensemble_val_stddev, errors)
# plt.title('Absolute errors vs Ensemble val Std Dev')

# plt.subplot(3, 2, 6)
# plt.scatter(ensemble_val_entropy, errors)
# plt.title('Absolute errors vs Ensemble val Entropy')
# plt.show()
################### ANALYSIS PLOTS ###################



################### DEFERING ###################
defer_based_on = ensemble_true_probs
title = 'ensemble_true_probs'
defer_based_on = ensemble_val_stddev
title = 'ensemble_val_stddev'

defered_rmse_list, non_defered_rmse_list = [], []
for i in range(ensemble_preds.shape[0]+1):
	print('\n{} datapoints deferred'.format(i))
	if title=='ensemble_true_probs':
		if i!=0:
			defered_rmse = mean_squared_error(true_values[np.argsort(defer_based_on)][:i], ensemble_preds[np.argsort(defer_based_on)][:i], squared=False)
		else:
			defered_rmse = 0
		defered_rmse_list.append(defered_rmse)

		if i!=ensemble_preds.shape[0]:
			non_defered_rmse = mean_squared_error(true_values[np.argsort(defer_based_on)][i:], ensemble_preds[np.argsort(defer_based_on)][i:], squared=False)
		else:
			non_defered_rmse = 0
		non_defered_rmse_list.append(non_defered_rmse)

	elif title=='ensemble_val_stddev':
		if i==ensemble_preds.shape[0]:
			defered_rmse = mean_squared_error(true_values, ensemble_preds, squared=False)
		elif i==0:
			defered_rmse = 0
		else:
			defered_rmse = mean_squared_error(true_values[np.argsort(defer_based_on)][-i:], ensemble_preds[np.argsort(defer_based_on)][-i:], squared=False)
		defered_rmse_list.append(defered_rmse)

		if i==0:
			non_defered_rmse = mean_squared_error(true_values, ensemble_preds, squared=False)
		elif i==ensemble_preds.shape[0]:
			non_defered_rmse = 0
		else:
			non_defered_rmse = mean_squared_error(true_values[np.argsort(defer_based_on)][:-i], ensemble_preds[np.argsort(defer_based_on)][:-i], squared=False)
	
		non_defered_rmse_list.append(non_defered_rmse)

	
	print('Defered RMSE : {:.3f}'.format(defered_rmse))
	print('Not Defered RMSE : {:.3f}'.format(non_defered_rmse))

plt.plot(range(ensemble_preds.shape[0]+1), defered_rmse_list, label='Defered RMSE')
plt.plot(range(ensemble_preds.shape[0]+1), non_defered_rmse_list, label='Non Defered RMSE')
plt.legend()
plt.xlabel('No. of datapoints defered')
plt.xticks(range(ensemble_preds.shape[0]+1))
plt.yticks(range(0,15))
plt.title('Based on '+title)
plt.grid()
plt.show()
################### DEFERING ###################



################### K MEANS FOR DEFERING ###################
# errors = np.absolute(ensemble_preds - true_values)

# data = np.concatenate((ensemble_true_probs.reshape(-1,1), errors.reshape(-1,1)), axis=-1)
# # data = errors.reshape(-1,1)
# kmeans = KMeans(init='k-means++', n_clusters=2, n_init=10)
# kmeans.fit(data)
# centroids = kmeans.cluster_centers_
# print(centroids)
# predictions = kmeans.predict(data)
# print(predictions)
# print('0: {} \t 1: {}'.format(list(predictions).count(0), list(predictions).count(1)))

# # # Step size of the mesh. Decrease to increase the quality of the VQ.
# # h = .02     # point in the mesh [x_min, x_max]x[y_min, y_max].

# # # Plot the decision boundary. For that, we will assign a color to each
# # x_min, x_max = data[:, 0].min() - 1, data[:, 0].max() + 1
# # y_min, y_max = data[:, 1].min() - 1, data[:, 1].max() + 1
# # xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

# # # Obtain labels for each point in mesh. Use last trained model.
# # Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])

# # # Put the result into a color plot
# # Z = Z.reshape(xx.shape)
# # plt.figure(1)
# # plt.clf()
# # plt.imshow(Z, interpolation='nearest',
# #            extent=(xx.min(), xx.max(), yy.min(), yy.max()),
# #            cmap=plt.cm.Paired,
# #            aspect='auto', origin='lower')

# plt.title('Absolute errors vs Ensemble true probs')
# plt.plot(data[:, 0], data[:, 1], 'k.', markersize=2)

# plt.scatter(centroids[:, 0], centroids[:, 1],
#             marker='x', s=169, linewidths=3,
#             color='r', zorder=10)
# plt.xlabel('Ensemble true probs')
# plt.ylabel('Absolute errors')
# plt.show()
################### K MEANS FOR DEFERING ###################
